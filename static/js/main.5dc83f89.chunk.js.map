{"version":3,"sources":["TodoForm.js","Todo.js","TodoList.js","App.js","rootReducer.js","serviceWorker.js","index.js"],"names":["TodoForm","add_todo","INITIAL_STATE","todo","useState","formData","setFormData","action","onSubmit","e","preventDefault","TextField","id","label","variant","name","value","onChange","target","fData","Todo","remove_todo","toggle_todo","activity","style","complete","textDecoration","ListItem","dense","button","onClick","ListItemText","primary","ListItemSecondaryAction","IconButton","className","aria-label","TodoList","todos","useSelector","state","dispatch","useDispatch","uuid","type","Grid","container","direction","justify","alignItems","Box","m","length","Paper","elevation","List","map","key","App","JSON","parse","window","localStorage","getItem","rootReducer","setItem","stringify","filter","new_todos","t","Boolean","location","hostname","match","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5dc83f89.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport './TodoList.css';\r\n\r\nconst TodoForm = ({ add_todo }) => {\r\n  const INITIAL_STATE = {\r\n    todo: '',\r\n  };\r\n\r\n  const [formData, setFormData] = useState(INITIAL_STATE);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((fData) => ({\r\n      ...fData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    add_todo(formData.todo);\r\n    setFormData(INITIAL_STATE);\r\n  };\r\n  return (\r\n    <form action='' onSubmit={handleSubmit}>\r\n      <div>\r\n        {/* <label htmlFor='todo'>Todo</label> */}\r\n        <TextField\r\n          id='id'\r\n          label='Todo'\r\n          variant='standard'\r\n          name='todo'\r\n          value={formData.todo}\r\n          onChange={handleChange}\r\n        />\r\n        {/* <input\r\n          type='text'\r\n          name='todo'\r\n          id='todo'\r\n          value={formData.todo}\r\n          onChange={handleChange}\r\n          placeholder='Enter an activity'\r\n        /> */}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React from 'react';\r\nimport {\r\n  ListItem,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n  IconButton,\r\n} from '@material-ui/core';\r\nconst Todo = ({ todo, remove_todo, toggle_todo }) => {\r\n  const { id, activity } = todo;\r\n\r\n  const style = todo.complete\r\n    ? { textDecoration: 'line-through' }\r\n    : { textDecoration: 'none' };\r\n\r\n  const handleToggle = () => {\r\n    toggle_todo(todo);\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    remove_todo(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ListItem dense button onClick={handleToggle}>\r\n        <ListItemText style={style} primary={activity} />\r\n        <ListItemSecondaryAction onClick={handleRemove}>\r\n          <IconButton>\r\n            <span className='material-icons' aria-label='remove todo'>\r\n              close\r\n            </span>\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TodoForm from './TodoForm';\r\nimport { v4 as uuid } from 'uuid';\r\nimport Todo from './Todo';\r\nimport { Grid, Box, List, Paper } from '@material-ui/core';\r\nimport './TodoList.css';\r\n\r\nconst TodoList = () => {\r\n  const todos = useSelector((state) => state.todos);\r\n  const dispatch = useDispatch();\r\n  const id = uuid();\r\n  const add_todo = (activity) => {\r\n    dispatch({ type: 'ADD_TODO', todo: { id: id, activity, complete: false } });\r\n  };\r\n\r\n  const toggle_todo = (todo) => {\r\n    dispatch({ type: 'TOGGLE_TODO', todo });\r\n  };\r\n\r\n  const remove_todo = (id) => {\r\n    dispatch({ type: 'REMOVE_TODO', id });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction='column' justify='center' alignItems='center'>\r\n        <Box className='todo-list' m={3}>\r\n          <header>\r\n            <h1>Redux Todo List</h1>\r\n          </header>\r\n          <section className='form-section'>\r\n            <TodoForm add_todo={add_todo} />\r\n          </section>\r\n          {todos.length > 0 && (\r\n            <Paper elevation={4} m={3}>\r\n              <section className='todo-section'>\r\n                <List>\r\n                  {todos.map((todo) => (\r\n                    <Todo\r\n                      key={uuid()}\r\n                      todo={todo}\r\n                      remove_todo={remove_todo}\r\n                      toggle_todo={toggle_todo}\r\n                    />\r\n                  ))}\r\n                </List>\r\n              </section>\r\n            </Paper>\r\n          )}\r\n        </Box>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const defaultTodos = JSON.parse(window.localStorage.getItem('todos')) || [];\r\nconst INITIAL_STATE = { todos: defaultTodos };\r\nconst rootReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      window.localStorage.setItem(\r\n        'todos',\r\n        JSON.stringify([...state.todos, { ...action.todo }])\r\n      );\r\n      return { ...state, todos: [...state.todos, { ...action.todo }] };\r\n\r\n    case 'REMOVE_TODO':\r\n      window.localStorage.setItem(\r\n        'todos',\r\n        JSON.stringify(state.todos.filter((todo) => todo.id !== action.id))\r\n      );\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter((todo) => todo.id !== action.id),\r\n      };\r\n\r\n    case 'TOGGLE_TODO':\r\n      const todo = action.todo;\r\n      todo.complete = !todo.complete;\r\n      const new_todos = state.todos.filter((t) => t.id !== todo.id);\r\n      window.localStorage.setItem(\r\n        'todos',\r\n        JSON.stringify([...new_todos, { ...todo }])\r\n      );\r\n      return { ...state, todos: [...new_todos, { ...todo }] };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport rootReducer from './rootReducer';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}